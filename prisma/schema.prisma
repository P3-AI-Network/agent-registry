// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  walletAddress String  @unique
  name          String?
  didIdentifier String  @unique
  did           String

  seed             String
  connectionString String? // Connection string for agent issuer 

  agents    Agent[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([walletAddress, didIdentifier])
  @@index([didIdentifier])
  @@map("users")
}

model Agent {
  id            String  @id @default(uuid())
  didIdentifier String  @unique
  did           String  @unique
  name          String
  description   String?
  capabilities  Json?

  seed             String @unique
  connectionString String?

  status    AgentStatus     @default(ACTIVE)
  metadata  AgentMetadata[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  mqttUri    String?
  inboxTopic String?

  @@index([status])
  @@map("agents")
}

model AgentMetadata {
  id         String             @id @default(uuid())
  agentId    String
  agent      Agent              @relation(fields: [agentId], references: [id], onDelete: Cascade)
  key        String
  value      String
  visibility MetadataVisibility @default(PUBLIC)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@unique([agentId, key])
  @@index([agentId])
  @@map("agent_metadata")
}

model MailCollector {
  id         String               @id @default(uuid())
  email      String
  subscribed Boolean              @default(true)
  purpose    MailCollectorPurpose @default(NEWS_LETTER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, purpose])
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  DEPRECATED
}

enum MetadataVisibility {
  PUBLIC
  PRIVATE
}

enum MailCollectorPurpose {
  NEWS_LETTER
  EARLY_ACCESS
}
